#+TITLE: S Linux From Scratch v7.7

* Preface
  Tks Gerard Beekmans, Matthew Burgess and Bruce Dubbs

** Foreword
My journey to learn and better understand Linux began over a decade ago,
back in 1998. I had just installed my first Linux distribution and had
quickly become intrigued with the whole concept and philosophy behind Linux.

There are always many ways to accomplish a single task. The same can be said
about Linux distributions. A great many have existed over the years. Some
still exist, some have morphed into something else, yet others have been
relegated to our memories. They all do things differently to suit the needs
of their target audience. Because so many different ways to acoomplish the
same end goal exist, I began to realize I no longer had to be limited by any
one implementation. Prior to discovering Linux, we simply put up with issues
in other Operating Systems as you had no choice. It was what it was, whether
you liked it or not. With linux, the concept of choice began to emerge. If
you didn't like something, you were free, even encouraged, to change it.

I tired a number of distributions and could not decide on any one. They were
great systems in their own right. It wasn't a matter of right and wrong
anymore. It had become a matter of personal taste. With all that choice 
available, it became apparent that there would not be a single system that
would be perfect for me. So I set out to create my own Linux system that
would fully conform to my personal preferences.

To truly make it my own system, I resolved to compile everything from source
code instead of using pre-compiled binary packages. This "perfect" Linux
system would have the strengths of various systems without their perceived
weaknesses. At first, the idea was rather daunting. I remained committed
to take the idea that such a system could be built. 

After sorting through issues such as circular dependencies and compile-time 
errors, I finally built a custom-built Linux system. It was fully operational
and perfectly usable like any of the other Linux systems out there at the
time. But it was my own creation. It was very staisfying to have put together
such a system myself. The only thing better would have been to create each
piece of software myself. This was the next best thing.

As I shared my goals and experiences with other members of the Linux communi-
ty, it became apparent that there was a sustained interest in these ideas.
It quickly became plain that such custom-built Linux systems serve not only
to meet user specific requirements, but also serve as an ideal learning
opportunity for programmers and system administrators to enhance their
Linux skills. Out of this broadened interest, the /Linux From Scratch Project/
was born.

This Linux From Scratch book is the central core around that project. It
provides the background and instructions necessary for you to design and
build your own system. while this book provides a template that will result
in a correctly working system, you are free to alter the instructions to 
suit yourself, which is, in part, an important part of this project. You
remain in control; we just lend a helping hand to get you started on your
own journey.

I sincerely hope you will have a great time working on your own Linux From
Scratch system and enjoy the numberous benefits of having a system that it 
truly your own.

** Audience
There are many reasons why you would want to read this book. One of the 
questions many people raise is, "why go through all the hassle of manually
building a Linux system from scratch when you can just download and install
an existing one?"

One important reason for this project's existence is to help you lean how
a Linux system works from the inside out. Building an LFS system helps 
demonstrate what makes Linux tick, and how things work together and depends
on each other. One of the best things that this learning experience can
provide is the ability to customize a Linux system to suit your own unique
needs.

Another key benefit of LFS is that it allows you to have more control over
the system without relying on someone else's Linux implementation. With
LFS, you are in the driver's seat and dictate every aspect of the system.

LFS allows you to create very compact Linux systems. When installing regular
distributions, you are often forced to install a great many programs which
are probably never used or understood. These programs waste resources. You
many argue that with today's hard drive and CPUs, such resources are no
longer a consideration. Sometimes, however, you are still constrained by size
considerations if nothing else. Think about bootable CDs, USB sticks, and
embedded systems. Those are areas where LFS can be beneficial.

Another advantage of a custom built Linux system is security. By compiling 
the entire system from source code, you are empowered to audit everything 
and apply all the security patches desired. It is no longer necessary to 
wait for somebody else to compile binary packages that fix a security hole.
Unless you examine the patch and implement it yourself, you have no gurantee
that the new binary package was built correctly and adequately fixes the 
problem.

There are too many other good reasons to build your own LFS system to list
them all here. In the end, education is by far the most powerful of reasons.
As you continue in your LFS experience, you will disover the power that
information and knowledge truly bring.
   
** LFS Target Architectures
The primary target architectures of LFS are the AMD/Intel x86(32-bit) and
x86_64(64-bit) CPUs. On the other hand, the instructions in this book are
also known to work, with some modifications, with the Power PC and ARM CPUs.
To build a system that utilizes on of these CPUs, the main prerequisite, in
addition to those on the next few pages, is an existing Linux system such as
an earlier LFS installation, Ubuntu, Read Hat/Fedora, SuSE, or other distri-
bution that targets the architecture that you have. Also note that a 32-bit
distribution can be installed and used as a host system on a 64-bit AMD/Intel
computer.

Some other facts about 64-bit systems need to be added here. When compared
to a 32-bit system, the sizes of executable programs are slightly larger
and the execution speeds are only slightly faster. For example, in a test
build of LFS-6.5 on a Core2Duo CPU based system, the following statistics
were measured:
#+BEGIN_SRC info
Architecture Build Time          Build Size
32-bit       198.5 minutes        648MB
64-bit       190.6 minutes        709MB
#+END_SRC
As you can see, the 64-bit build is only 4% faster and is 9% larger than the
32-bit build. The gain from going to a 64-bit system is relatively minimal.
Of course, if you have more than 4GB of RAM or want to manipulate data that
exceeds 4GB, the advantages of a 64-bit system are substantial.

The default 64-bit build that results from LFS is considered as "pure" 
64-bit system. That is, it supports 64-bit executables only. Building a 
"multi-lib" system requires compiling many applications twice, once for a 
32-bit system and once for a 64-bit system. This is not directly supported
in LFS because it would interfere with the educational objective of providing
the instructions needed for a straightforward base Linux system. You can 
refer to the /Cross Linux From Scratch project/ for this advanced topic.

There is one last comment about 64-bit systems. There are some older packages
that cannot currently be built in a "pure" 64-bit system or require speciali-
zed build instructions. Generally, these packages have some embedded 32-bit
specific assembly language instructions that fail when building on a 64-bit
system. This includes some Xorg drivers for some legacy video cards at
http://xorg.freedesktop.org/releases/individual/driver/
Many of these problems can be worked around, but may require some specialized
procedures or patches.
** LFS and Standards
The structure of LFS follows Linux standards as closely as possible. The
primary standsards are:
+ POSIX.1-2008.
+ Filesystem Hierarchy Standard version 3.0 Draft 1 (FHS)
+ Linux Standard Base (LSB) Specifications
  The LSB has five separate standards: Core, C++, Desktop, Runtime Languages,
  and Printing. In addition to generic requirements there are also architec-
  ture specific requirements. LFS attempts to conform to the architectures
  discussed in the previous section.
  
  Note:
  Many people do not agree with the requirements of the LSB. The main purpose
  of defining it is to ensure that propritary software will be able to be
  installed and run properly on a compliant system. Since LFS is source 
  based, the user has complete control over what packages are desired and 
  many choose not to install some packages that are specified by the LSB.

Creating a complete LFS system capable of passing the LSB certifications 
tests is possible, but not without many additional packages that are beyond
the scope of LFS. These additional packages have installation instructions
in BLFS.

*** Packages supplied by LFS needed to satisfy the LSB Requirements
LSB Core:                base, bc, binutils, coreutils, diffutils, file,
                         findutils, gawk, grep, gzip, m4, manDB, ncurses,
                         procps, psmisc, sed, shadown, tar, util-linux, zlib
LSB C++:                 gcc
LSB Desktop:             N/A
LSB Runtime languages:   Perl
LSB Printing:            N/A
LSB Multimedia:          N/A

*** Packages supplied by BLFS needed to satisfy the LSB Requirements
LSB Core:                at, batch, cpio, ed, fcrontab, initd-tools,
                         lsb_release, PAM, pax, sendmail, time
LSB C++:                 N/A
LSB Desktop:             atk, cairo, desktop-file-utils, freetype, fontconfig
                         glib2, GTK+2, icon-naming-utils, libjpeg, libpng,
                         libxml2, mesalib, pango, Qt4, xorg
LSB Runtime Languages:   Python
LSB Printing:            CUPS
LSB Multimedia:          alsa libraries, NSPR, NSS, OpenSSL, Java, xdg-utils

*** packages not supplied by LFS or BLFS needed to satisfy the LSB Requirements
LSB Core:                N/A
LSB C++:                 N/A
LSB Desktop              Qt3
LSB Runtime Languages:   N/A
LSB Printing             N/A
LSB Multimedia:          N/A

** Rationale for Packages in the Book
As stated earlier, the goal of LFS is to build a complete and usable 
foundation-level system. This includes all packages needed to replicate
itself while providing a relatively minimal base from which to customize
a more complete system based on the choices of the user. This does not mean
that LFS is the smallest system possible. Several important packages are
included that are not strictly required. The lists below document the 
retionale for each package in the book.

+ Acl
This package contains utilities to administer Access Control Lists, which
are used to define more fine-grained discretionary access rights for files
and directories.

+ Attr
This package contains programs for administering extended attributes on
filesystem objects.

+ Autoconf
This package contains programs for producing shell scripts that can automati-
cally configure source code from a developer's template. It is often needed
to rebuild a package after updates to the build procedures.

+ Automake
This package contains programs for generating Makefile from a template. It 
is often needed to rebuild a package after updates to the build procedures.

+ Bash
This package satisfies an LSB core requirement to provide a Bourne Shell
interface to the system. It was chosen over other shell packages because
of its common usage and extensive capabilities beyond basic shell functions.

+ Bc
This package provides an arbitrary precision numeric processing language. It
satisfies a requirement needed when building the Linux kernel.

+ Binutils
This package contains a linker, an assembler, and other tools for handling
object files. The programs in this package are needed to compile most of
the packages in an LFS system and beyond.

+ Bison
This package contains the GNU version of yacc (Yet Another Compiler Compiler)
needed to build several other LFS programs.

+ Bzip2
This package contains prorams for compressing and decompressing files. It is
required to decompress many LFS packages.

+ Check
This package contains a test harness for other programs. It is only installed
in the temporary toolchain.

+ Coreutils
This package contains a number of essential programs for viewing and manipu-
lating files and directories. These programs are needed for command line file
management, and are necessary for the installation procedures of every 
package in LFS.

+ DejaGNU
This package contains a framework for testing other programs. It is only 
installed in the temporary toolchain.

+ Diffutils
This package contains prorams that show the differences between files or
directories. These programs can be used to create patches, and are also
used in many packages' build procedures.

+ E2fsprogs
This package contains the utilities for handling the ext2, ext3 and ext4
file systems. These are the most common and thoroughly tested file systems
that linux supports.

+ Eudev
This package is a device manager. It dynamically controls the entries in the
/dev directory as devices are added or removed from the system.

+ Expat
This package contains a relatively small XML parsing library. It is required
by the XML::Parser Perl module.

+ Expect
This package contains a program for carrying out scripted dialogues with 
other interactive programs. It is commonly used for testing other packages.
It is only installed in the temporary toolchain.

+ File
This package contains a utility for determining the type of a given file or
files. A few packages need it to build.

+ Findutils
This package contains programs to find files in a file system. It is used in
many packages' build scripts.

+ Flex
This package contains a utility for generating programs that recognize
patterns in text. It is the GNU version of the lex (lexical analyzer) 
program. It is required to build several LFS packages.

+ Gawk
This package contains programs for manipulating text files. It is the GNU
version of awk(Aho-Weinberg-Kernighan). It is used in many other packages'
build scripts.

+ Gcc
This package is the Gnu Compiler Collection. It contains the C and C++
compilers as well as several others not built by LFS.

+ GDBM
This package contains the GNU Database Manager library. It is used by one
other LFS package, Man-DB.

+ Gettext
This package contains utilities and libraries for internationalization and
localization of numerous packages.

+ Glibc
This package contains the main C library. Linux programs would not run 
without it.

+ GMP
This package contains math libraries that provide useful functions for
arbitrary precision arithmetic. It is required to build Gcc.

+ Gperf
This package contains a program that generates a perfect hash function from
a key set. It is required for Eudev.

+ Grep
This package contains programs for searching through files. These programs
are used by most packages' build scripts.

+ Groff
This package contains programs for processing and formatting text. One
important function of these programs is to format man pages.

+ GRUB
This package is the Grand Unified Boot Loader. It is one of several boot
loaders available, but is the most flexible.

+ Gzip
This packages contains programs for compressing and decompressing files. It
is needed to decompress many packages in LFS and beyond.

+ Iana-etc
This package provides data for network services and protocols. It is needed
to enable proper networking capabilities.

+ Inetutils
This package contains programs for basic network administration.

+ Intltool
This package contains tools for extracting translatable strings from source
files.

+ IProute2
This package contains programs for basic and advanced IPv4 and IPv6 network-
ing. It was chosen over the other common network tools package(net-tools)
for IPv6 capabilities.

+ Kbd
This package contains key-table files, keyboard utilities for non-US
keyboards, and a number of console fonts.

+ Kmod
This package contains programs needed to administer Linux Kernel modules.

+ Less
This package contains a very nice text file viewer that allows scrolling up
or down when viewing a file. It is also used by Man-DB for viewing manpages.

+ Libcap
This package implements the user-space interfaces to the POSIX 1003.1e
capabilities available in Linux kernels.

+ Libpipeline
The Libpipeline package contains a library for manipulating pipelines of
subprocesses in a flexible and convenient way. It is required by the Man-DB
package.

+ 
* Part I. Introduction
* Part II. Preparing for the build
* Part III. Building the LFS system
* Part IV. Appendices
